version: "3.7"

services:
  #################-Producer-#########################
  client:
    container_name: producer-http
    build:
      context: ./producer/
      dockerfile: Dockerfile
    depends_on:
      - kafka
    ports:
      - "3000:3000"

  #################-Consumer-#########################
  members:
    container_name: members-consumer
    build:
      context: ./consumerMembers/
      dockerfile: Dockerfile
    depends_on:
      - kafka
    ports:
      - "8000:8000"
  #################-POSTGRES-##########################
  postgres:
    image: docker.io/bitnami/postgresql:latest
    volumes:
      - ./Database/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRESQL_USERNAME=root
      - POSTGRESQL_DATABASE=root
      - "ALLOW_EMPTY_PASSWORD=yes"
    ports:
      - "5432:5432"
    logging:
      driver: none
  ###################-PG_ADMIN-##########################
  pgadmin:
    image: "dpage/pgadmin4"
    environment:
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com"
      PGADMIN_DEFAULT_PASSWORD: "admin"
    ports:
      - "80:80"
    depends_on:
      - postgres
    logging:
      driver: none

  ###################-zookeeper-##########################
  zookeeper:
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./bitnami/zookeeper:/bitnami/zookeeper
    logging:
      driver: none
  ###################-kafka-##########################
  kafka:
    container_name: elkafka
    image: "bitnami/kafka:latest"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"
    logging:
      driver: none
  ###################-init-kafka-##########################
  init-kafka:
    image: "bitnami/kafka:latest"
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      # kafka-topics.sh --bootstrap-server kafka:9092 --list

      # echo -e 'Creating kafka topics'
      # kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic members --replication-factor 1 --partitions 2
      # kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic sales --replication-factor 1 --partitions 2
      # kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic stock --replication-factor 1 --partitions 2
      # kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic locations --replication-factor 1 --partitions 2
      # echo -e 'Successfully created the following topics:'
      # kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
